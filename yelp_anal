1. bussiness json파일을 hive schema 없이 테이블로 넣기
1) spark >>  json 스트링에서 parquet에서 사용불가한 문자인 '-'를 '_'으로 변환하여 parquet파일로 쓰기
val rdd = spark.read.textFile("hdfs:/user/training/yelp/business").map(value => value.replace("dairy-free", "dairy_free").replace("gluten-free","gluten_free").replace("soy-free","soy_free")).rdd
val df = spark.read.json(rdd)
df.write.format("parquet").save("hdfs:/user/training/max/business_parquet")

2) hdfs 에서 file 경로복사
3) impala에서 테이블 처리 : impala에서는 parquet파일을 기반으로 impala table를 생성할수 있음.
 CREATE EXTERNAL TABLE test.business_max LIKE PARQUET 'hdfs:/user/training/max/business_parquet/part-00000-5928b258-0027-48b6-bc5a-9296f7d2690a-c000.snappy.parquet' 
  STORED AS PARQUET 
  LOCATION 'hdfs:/user/training/max/business_parquet';




2. yelp데이터 분석하기.
*참고용 정보 : business table schema 
address             	string              	from deserializer
business_id         	string              	from deserializer
categories          	array<string>       	from deserializer
city                	string              	from deserializer
hours               	struct<friday:string,monday:string,saturday:string,sunday:string,thursday:string,tuesday:string,wednesday:string>	from deserializer
is_open             	int                 	from deserializer
latitude            	double              	from deserializer
longitude           	double              	from deserializer
name                	string              	from deserializer
neighborhood        	string              	from deserializer
postal_code         	string              	from deserializer
review_count        	int                 	from deserializer
stars               	double              	from deserializer
state               	string              	from deserializer
attributes          	struct<accepts_insurance:boolean,ages_allowed:string,alcohol:string,bike_parking:boolean,business_accepts_bitcoin:boolean,business_accepts_credit_cards:boolean,by_appointment_only:boolean,byob:boolean,byob_corkage:string,caters:boolean,coat_check:boolean,corkage:boolean,dogs_allowed:boolean,drive_thru:boolean,good_for_dancing:boolean,good_for_kids:boolean,happy_hour:boolean,has_tv:boolean,noise_level:string,open24hours:boolean,outdoor_seating:boolean,restaurants_attire:string,restaurants_counter_service:boolean,restaurants_delivery:boolean,restaurants_good_for_groups:boolean,restaurants_reservations:boolean,restaurants_table_service:boolean,restaurants_take_out:boolean,smoking:string,wheelchairaccessible:boolean,wifi:string,ambience:struct<casual:boolean,classy:boolean,divey:boolean,hipster:boolean,intimate:boolean,romantic:boolean,touristy:boolean,trendy:boolean,upscale:boolean>,bestnights:struct<friday1:boolean,monday1:boolean,saturday1:boolean,sunday1:boolean,thursday1:boolean,tuesday1:boolean,wednesday1:boolean>,businessparking:struct<garage:boolean,lot:boolean,street:boolean,valet:boolean,validated:boolean>,dietaryrestrictions:struct<dairy_free:boolean,gluten_free:boolean,halal:boolean,kosher:boolean,soy_free:boolean,vegan:boolean,vegetarian:boolean>,goodformeal:struct<breakfast:boolean,brunch:boolean,dessert:boolean,dinner:boolean,latenight:boolean,lunch:boolean>,hairspecializesin:struct<africanamerican:boolean,asian:boolean,coloring:boolean,curly:boolean,extensions:boolean,kids:boolean,perms:boolean,straightperms:boolean>,music:struct<backgroundmusic:boolean,dj:boolean,jukebox:boolean,karaoke:boolean,live:boolean,nomusic:boolean,video:boolean>,restaurantspricerange2:int>	from deserializer
cat_exploded        	string              	from deserializer

1) 공통적으로 사용할 view 생성.
cateogries 컬럼을 explode해서 view 로 생성

CREATE VIEW r_view AS 
SELECT Restaurants.*, category
FROM Restaurants LATERAL VIEW explode(categories) a AS category

2) Which Cities Have The Highest Number Of Restaurants?
>> query
    select city, count(1) as cnt from Restaurants group by city  order by cnt desc limit 1;
>> result 
    Toronto	7148


3)  Top 15 Sub-Categories Of Restaurants 
>> query
    SELECT category, count(1) as cnt
    FROM Restaurants LATERAL VIEW explode(categories) a AS category
    GROUP BY category
    order by cnt desc
    limit 15
    ;

     SELECT category, count(1) as cnt
    FROM r_view
    GROUP BY category
    order by cnt desc
    limit 15
    ;
>> result
    Restaurants	54618
    Food	10348
    Nightlife	7479
    Bars	7194
    Sandwiches	6345
    Fast Food	6280
    American (Traditional)	6097
    Pizza	6067
    Italian	4662
    Burgers	4558
    Breakfast & Brunch	4497
    Mexican	4105
    Chinese	3987
    American (New)	3979
    Cafes	3039

4) Distribution of ratings vs categories 
>> query
    SELECT category, stars, count(1) as cnt
    FROM r_view
    GROUP BY category, stars
    order by cnt desc
    limit 20
    ;
>> result
    Restaurants	4.0	13526
    Restaurants	3.5	13387
    Restaurants	3.0	9825
    Restaurants	4.5	6516
    Restaurants	2.5	5448
    Restaurants	2.0	2945
    Food	4.0	2919
    Food	3.5	2179
    Nightlife	3.5	2133
    Food	4.5	2079
    Nightlife	4.0	2057
    Bars	3.5	2052
    Bars	4.0	1990
    American (Traditional)	3.5	1631
    Sandwiches	4.0	1566
    Restaurants	5.0	1492
    Nightlife	3.0	1486
    American (Traditional)	3.0	1461
    Pizza	3.5	1454
    Pizza	4.0	1450

5) What ratings do the majority of restaurants have? 
>> query
    SELECT stars, count(business_id) as cnt
        FROM r_view
        GROUP BY stars
        order by cnt desc
        limit 20
        ;
>> result
    4.0	54675
    3.5	51371
    3.0	36258
    4.5	27814
    2.5	19421
    2.0	9932
    5.0	6770
    1.5	3612
    1.0	1103

6) Rating distribution in restaurant reviews
 select stars, round((count(stars) / sum(count(stars)) over())* 100)
 from review 
 group by stars 
;
5	43.0
4	23.0
3	12.0
2	8.0
1	14.0

